javascript

1.
function solution(participant, completion) {
    var answer = '';
    for (let x = 0; x < participant.length; x++){
        let check=false;
        for(let y=0; y < completion.length; y++) {
            if(completion[y]===participant[x]){
                check=true;
                }
            }
        if(check!==true) {
        answer = participant[x];
        }  
    }
    return answer;
}

테스트 1
입력값 〉	["leo", "kiki", "eden"], ["eden", "kiki"]
기댓값 〉	"leo"
실행 결과 〉	테스트를 통과하였습니다.
테스트 2
입력값 〉	["marina", "josipa", "nikola", "vinko", "filipa"], ["josipa", "filipa", "marina", "nikola"]
기댓값 〉	"vinko"
실행 결과 〉	테스트를 통과하였습니다.
테스트 3
입력값 〉	["mislav", "stanko", "mislav", "ana"], ["stanko", "ana", "mislav"]
기댓값 〉	"mislav"
실행 결과 〉	실행한 결괏값 ""이(가) 기댓값 "mislav"와(과) 다릅니다.
테스트 결과 (~˘▾˘)~
3개 중 2개 성공

==> 이 방식으로는 같은 값(이름)이 하나 이상 있으면, 기댓값이 안나옴.


2. sort() 이용 방법
function solution(participant, completion) {
    participant.sort();
    completion.sort();
    for(let i = 0; i < participant.length; i++){
        if(participant[i]!==completion[i]){
        return participant[i]
        }
    }
}



java


Arrays.sort()메서드


Hash 
: Key, Value가 쌍을 이루는 자료구조

O(n)의 시간 복잡도.
Division Method, Digit Folding, Multiplication Method, Univeral Hashing,...

Key는 Hash에서 매핑할때 사용하는 인덱스
key는 절대로 중복되지 않는다.
같은 Key에 값을 넣게되면 이전값은 사라지고 새로운 값이 저장된다.
Value는 Key로 매핑했을 때 나오는 값을 말한다.
Hash는 배열의 인덱스와 다르게 순차적으로 저장되는 것이 아니라 전 영역에 고루 분포된다.
따라서 배열보다 빠르게 값을 찾을 수 있다.

Hash로 값을 생성하면 고유의 주소 값이 생기는데 이것을 숫자로 변환한 것이 해시코드다.
즉, 자바에서 해시코드는 Heap 영역의 인스턴스에 대한 참조 값이고,
Hash함수란 데이터의 효율적인 관리를 위해 임의의 길이를 가진 데이터를 고정된 길이를 가진 데이터로 매핑해 주는 함수다.

Hash Collision 해시 충돌.
같은 Key값을 넣으면 발생.

해결 방법 :

Chaining : 해시 충돌이 일어나면 연결 리스트를 이용해 데이터들을 연결하는 방식
Chaining은 추가적인 메모리를 이용해 동일한 Bucket에 연결 리스트로 하나씩 순차적으로 저장하는 것을 의미한다.
즉, 꼬리잡기 게임처럼 연결 리스트 내에서 하나의 노드가 되어 차례대로 연결되는 것을 의미한다.
Chaining은 연결리스트만 사용하면 돼서 복잡하지 않고 같은 주소 값을 그대로 사용할 수 있다는 장점이 있다.
but, 특정 주소에 계속 쌓이게 되면 성능이 현저하게 낮아지고 많은 메모리 공간을 잡아 먹는다는 단점이 있다.

Open Addressing(개방주소법) : 해시 충돌이 일어나면 다른 Bucket에 삽입하는 방식
    Linear Probing : 해시 충돌 발생 시 다음 bucket이나 몇 개의 bucket을 건너 뛰어 데이터를 삽입하는 방식
    Quadratic Probing : 해시 충돌 발생 시 제곱만큼 건너 뛰어 데이터를 삽입하는 방식
    Double Hashing : 해시 충돌 시 다른 해시함수를 한번 더 적용시킴
    개방 주소법은 chaining처럼 추가적인 메모리가 필요없다는 장점을 가지고 있다.
    또한 데이터를 직접 모두 읽어 오기 때문에, 포인터를 쓸 일이 없어 포인터를 사용함으로써 나타나는 오버헤드를 방지할 수 있다.



class example {
    public static void main(String[] args) {

        HashMap<String, String> map = new HashMap<String, STring>();
        map.put("id1", "pw1");
        map.put("id2", "pw2");
        map.put("id3", "pw3");

        Scanner sc = new Scanner(System.in);

        while(true) {
            System.out.println("id:");
            String id = sc.nextLine().trim();

            System.out.println("password:");
            String password = sc.nextLine().trim();

            if(!map.containsKey(id)) {
                System.out.println("this id doesn't exist");
                continue;
            }else {
                if(!(map.get(id)).equals(password)) {
                    System.out.println("password doesn't match");
                }else {
                    System.out.println("id&password match");
                    break;
                }
            }
        }
    }
}